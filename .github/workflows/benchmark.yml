name: benchmarks

on:
  # Schedule the workflow to run once per day at 16:00 UTC
  schedule:
    - cron: '35/60 * * * *'
  push:
    branches:
      - main

jobs:
  benchmarks:
    name: run benchmarks
    runs-on: ["ubuntu-latest"]
    steps:
      - name: Ensure workspace ownership
        if: ${{ !cancelled() && !failure() }}
        run: echo "chown -R $USER $GITHUB_WORKSPACE" && sudo chown -R $USER $GITHUB_WORKSPACE

      - name: Check out code
        if: ${{ !cancelled() && !failure() }}
        uses: actions/checkout@v4

      - name: Start builder container
        if: ${{ !cancelled() && !failure() }}
        run: |
          BUILDER_CONTAINER=infinity_build_$(od -An -N4 -tx4 /dev/urandom | tr -d ' ')
          CPUS=${CPUS:-$(nproc)}
          echo "BUILDER_CONTAINER=${BUILDER_CONTAINER}" >> $GITHUB_ENV
          echo "CPUS=${CPUS}" >> $GITHUB_ENV
          TZ=${TZ:-$(readlink -f /etc/localtime | awk -F '/zoneinfo/' '{print $2}')}
          sudo docker rm -f -v ${BUILDER_CONTAINER} && sudo docker run --privileged --cap-add=NET_ADMIN -d --name ${BUILDER_CONTAINER} -e TZ=$TZ -e CMAKE_BUILD_PARALLEL_LEVEL=${CPUS} -v $PWD:/infinity -v /boot:/boot -v /var/run/docker.sock:/var/run/docker.sock --cpus ${CPUS} infiniflow/infinity_builder:centos7_clang18

      - name: Prepare benchmark datasets
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && wget ftp://ftp.irisa.fr/local/texmex/corpus/sift.tar.gz"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && wget ftp://ftp.irisa.fr/local/texmex/corpus/gist.tar.gz"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && tar -zxvf sift.tar.gz"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv sift/sift_base.fvecs test/data/benchmark/sift_1m/sift_base.fvecs"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv sift/sift_query.fvecs test/data/benchmark/sift_1m/sift_query.fvecs"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv sift/sift_groundtruth.ivecs test/data/benchmark/sift_1m/sift_groundtruth.ivecs"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && tar -zxvf gist.tar.gz"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv gist/gist_base.fvecs test/data/benchmark/gist_1m/gist_base.fvecs"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv gist/gist_query.fvecs test/data/benchmark/gist_1m/gist_query.fvecs"
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && mv gist/gist_groundtruth.ivecs test/data/benchmark/gist_1m/gist_groundtruth.ivecs"

      - name: Start infinity release version
        if: ${{ !cancelled() && !failure() }}
        run: |
          sudo docker exec ${BUILDER_CONTAINER} bash -c "cd /infinity/ && rm -fr /var/infinity && cmake-build-release/src/infinity --config=conf/pytest_parallel_continuous_conf.toml > release.log 2> release_error.log" &

      - name: Stop infinity release
        if: ${{ !cancelled() && !failure() && steps.choose_test_type.outputs.RUN_PYTEST_PARALLEL == 'true' }}
        # && !contains(github.event.pull_request.labels.*.name, 'invalid')
        id: stop_py_tests
        run: |
          sudo chmod +x scripts/timeout_kill.sh
          pids=$(sudo docker exec ${BUILDER_CONTAINER} pgrep -f cmake-build-release/src/infinity | xargs echo)
          sudo docker exec ${BUILDER_CONTAINER} bash -c "/infinity/scripts/timeout_kill.sh 15 ${pids}"
          if [ $? -ne 0 ]; then
            echo "Failed to kill infinity release version"
            exit 1
          fi
      
      - name: Destroy builder container
        if: always()  # always run this step even if previous steps failed
        run: |
            if [ -n "${BUILDER_CONTAINER}" ]; then
              sudo docker rm -f -v ${BUILDER_CONTAINER}
            fi

